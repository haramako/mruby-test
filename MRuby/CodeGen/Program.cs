using System;
using System.Collections.Generic;
using MRuby;
using MRuby.CodeGen;

class Program
{
    static void Main(string[] args)
    {
        // For testing.
        if (true)
        {
            Console.WriteLine(typeof(Dictionary<int, int>.KeyCollection)); // System.Collections.Generic.Dictionary`2+KeyCollection[System.Int32,System.Int32]
            //Console.WriteLine(typeof(Dictionary<int, int>.KeyCollection).FullName); // System.Collections.Generic.Dictionary`2+KeyCollection[System.Int32,System.Int32]
            Console.WriteLine(typeof(List<int>)); // System.Collections.Generic.List`1[System.Int32]
            Console.WriteLine(typeof(ClassInClass.ClassInClassChild));

            Console.WriteLine();
            foreach ( var m in typeof(Object).GetMethods())
            {
                Console.WriteLine(m);
            }
            Environment.Exit(0);
        }


        var gen = new CodeGenUtil();
        var mrubyTypes = CodeGenUtil.GetMRubyClasses(new string[] { "MRubyLib" });
        mrubyTypes.Add(typeof(System.Object));
        mrubyTypes.Add(typeof(Array));
        mrubyTypes.Add(typeof(List<int>));

        var reg = new Registry();

        foreach (var t in mrubyTypes)
        {
            //Console.WriteLine(t);
            gen.RegisterClass(reg, t);
        }

        var printer = new RegistryPrinter(0);
        printer.PrintRegistry(reg);

        var path = "../CodeGenTest/AutoGenerated/";

        foreach (var cls in reg.AllDescs())
        {
            if (!cls.IsNamespace && !cls.Type.IsGenericType)
            {
                CodeGenerator cg = new CodeGenerator(reg, cls, path);
                cg.givenNamespace = "";
                cg.Generate();
            }
        }

        CodeGenUtil.GenerateBind(reg, path);
        Console.WriteLine("Generated");
    }
}
